/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */

// Importing required modules
const express = require("express");
const bodyParser = require("body-parser");
const fs = require("fs");
const path = require("path");
const app = express();
port = 3000;

app.use(bodyParser.json());

// Array to store todos

let todos = [
  // {
  //   id: '201',
  //   todo: {
  //     title: "Buy groceries",
  //     completed: false,
  //     description: "I should buy groceries"
  //   },
  // },
  // {
  //   id: '234',
  //   todo: {
  //     title: "second todo",
  //     completed: false,
  //     description: "This is my second todos description"
  //   },
  // },
];

// Array to store ids of todos
let ids = [
  // 201, 234
];

//path to todo.json
const todoPath = path.join(__dirname, "./todos.json");

//path to ids.json
const idsPath = path.join(__dirname, "./ids.json");

// Function to read the todos and ids from a JSON file
function readFile(filePath) {
  return (data = new Promise((resolve, reject) => {
    fs.readFile(filePath, "utf-8", (err, data) => {
      if (err) {
        reject(err);
      } else {
        if (data.trim() == "") {
          resolve({});
        } else {
          try {
            const jsonData = JSON.parse(data);
            resolve(jsonData);
          } catch (parseErr) {
            reject(
              new Error(`Invalid JSON in file ${filePath}: ${parseErr.message}`)
            );
          }
        }
      }
    });
  }));
}

//An Immediately Invoked Function Expression (IIFE). It's a function that is immediately called as soon as it is defined. The catch at the end is used to catch any errors that might occur during the execution of the async function.


// Function to write the updated todos and ids to the JSON file
function writeFile(filePath, todosUpdate) {
  return (writeStatus = new Promise((resolve, reject) => {
    fs.writeFile(filePath, JSON.stringify(todosUpdate), (err) => {
      if (err) {
        reject(err);
      } else {
        resolve("Succesfully updated the todo in todos.json");
      }
    });
  }));
}

// Function to check if a todo with a given id exists
// If it exists, it returns the index of the todo and a boolean indicating the existence of the todo

function checkID(todos, id) {
  const index = todos.findIndex((todo) => todo.id === id);
  const idStatus = index !== -1;
  return { index, idStatus };
}

// Route to get all todos

app.get("/todos/", (req, res) => {
  let todosForTest = [];
    
  todos.forEach((object) => {       //this is a quickfix for to match the format the test case todo was asking  
    todosForTest.push(object.todo); //there is no logical error here tho but it takes a little more space if you do it in real life projects
  });
  res.status(200).json(todosForTest);
});

// Route to get a specific todo by id

app.get("/todos/:id", (req, res) => {
  const id = parseInt(req.params.id);
  console.log(id);

  const { index, idStatus } = checkID(todos, id);

  if (idStatus) {
    res.status(200).json(todos[index]);
  } else {
    res.status(404).send("404 Not Found");
  }
});

// Route to create a new todo

app.post("/todos", async (req, res) => {
  const newTodo = req.body;
  // console.log(newTodo);

  // Immediately Invoked Function Expression (IIFE) to read the todos at the start of the program
  (async () => {
    todos = await readFile(todoPath);
  })().catch((err) => {
    console.error("An error occured while reading the file", err);
  });

  //IIFE to read the ids at the start of the program
  (async () => {
    ids = await readFile(idsPath);
  })().catch((err) => {
    console.error("An error occured while reading the file", err);
  });

  const id = Math.max(0, ...ids) + 1; // generate a unique id
  ids.push(id);
  todos.push({ id: id, todo: newTodo });
  // console.log({id});
  try {
    const fileStatus = await writeFile(todoPath, todos);
    const idsStatus = await writeFile(idsPath, ids);
    console.log(fileStatus);
    console.log(idsStatus);
    res.status(201).json({ id });
  } catch (err) {
    console.error(err);
    res
      .status(500)
      .json({ error: "An error occurred while writing to the file" });
  }
});

// Route to update a specific todo by id

app.put("/todos/:id", async (req, res) => {
  const id = parseInt(req.params.id);
  const updateTodo = req.body;
  // Immediately Invoked Function Expression (IIFE) to read the todos at the start of the program

  (async () => {
    todos = await readFile(todoPath);
  })().catch((err) => {
    console.error("An error occured while reading the file", err);
  });

  //IIFE to read the ids at the start of the program
  (async () => {
    ids = await readFile(idsPath);
  })().catch((err) => {
    console.error("An error occured while reading the file", err);
  });

  const { index, idStatus } = checkID(todos, id);

  if (idStatus) {
    // Check if the description property exists in the updateTodo object
    // if (!updateTodo.hasOwnProperty('description')) {
    //   // If it doesn't exist, keep the original description                  //This chunck of code is only for the time when you
    //   updateTodo.description = todos[index].todo.description;              // know the specific property is not updated ever
    // }
    todos[index].todo = updateTodo;
    console.log(todos[index].todo);
    try {
      const fileStatus = await writeFile(todoPath, todos);
      const idsStatus = await writeFile(idsPath, ids);
      console.log(fileStatus);
      console.log(idsStatus);
      res.status(200).json(todos[index].todo);
    } catch (err) {
      console.error(err);
      res
        .status(500)
        .json({ error: "An error occurred while writing to the file" });
    }
  } else {
    res.status(404).send("404 Not Found");
  }
});

// Route to delete a specific todo by id

app.delete("/todos/:id", async (req, res) => {
  const id = parseInt(req.params.id);

  // Immediately Invoked Function Expression (IIFE) to read the todos at the start of the program
  (async () => {
    todos = await readFile(todoPath);
  })().catch((err) => {
    console.error("An error occured while reading the file", err);
  });

  //IIFE to read the ids at the start of the program
  (async () => {
    ids = await readFile(idsPath);
  })().catch((err) => {
    console.error("An error occured while reading the file", err);
  });

  const { index, idStatus } = checkID(todos, id);

  if (idStatus) {
    ids.splice(ids.indexOf(id), 1);
    todos.splice(index, 1);
    // console.log(todos[index].todo);
    try {
      const fileStatus = await writeFile(todoPath, todos);
      const idsStatus = await writeFile(idsPath, ids);
      console.log(fileStatus);
      console.log(idsStatus);
      res.status(200).json({ Status: "Todo item was found and deleted" });
    } catch (err) {
      console.error(err);
      res
        .status(500)
        .json({ error: "An error occurred while writing to the file" });
    }
  } else {
    res.status(404).send("404 Not Found");
  }
});

// Route to handle all other undefined route
app.all("*", (req, res) => {
  res.status(404).send("Route not found");
});

// Start the server
// app.listen(port, (req, res)=>{
//   console.log("connection to port succesful");
// });

module.exports = app;
